--- a/chrome/browser/ungoogled_flag_entries.h
+++ b/chrome/browser/ungoogled_flag_entries.h
@@ -104,4 +104,8 @@
      "Hide SidePanel Button",
      "Hides the SidePanel Button. ungoogled-chromium flag.",
      kOsDesktop, SINGLE_VALUE_TYPE("hide-sidepanel-button")},
+    {"disable-link-drag",
+     "Disable link drag",
+     "Prevents dragging of links and selected text. ungoogled-chromium flag.",
+     kOsDesktop, FEATURE_VALUE_TYPE(blink::features::kDisableLinkDrag)},
 #endif  // CHROME_BROWSER_UNGOOGLED_FLAG_ENTRIES_H_
--- a/third_party/blink/common/features.cc
+++ b/third_party/blink/common/features.cc
@@ -40,6 +40,8 @@ BASE_FEATURE(kAutofillSendUnidentifiedKe
              "AutofillSendUnidentifiedKeyAfterFill",
              base::FEATURE_DISABLED_BY_DEFAULT);
 
+BASE_FEATURE(kDisableLinkDrag, "DisableLinkDrag", base::FEATURE_DISABLED_BY_DEFAULT);
+
 // Apply lazy-loading to ad frames which have embeds likely impacting Core Web
 // Vitals.
 BASE_FEATURE(kAutomaticLazyFrameLoadingToAds,
--- a/third_party/blink/public/common/features.h
+++ b/third_party/blink/public/common/features.h
@@ -24,6 +24,8 @@ constexpr int kBrowsingTopicsConfigVersi
 
 constexpr int kBrowsingTopicsTaxonomyVersionDefault = 1;
 
+BLINK_COMMON_EXPORT BASE_DECLARE_FEATURE(kDisableLinkDrag);
+
 BLINK_COMMON_EXPORT BASE_DECLARE_FEATURE(kAnonymousIframeOriginTrial);
 BLINK_COMMON_EXPORT
 BASE_DECLARE_FEATURE(kAutofillDetectRemovedFormControls);
--- a/third_party/blink/renderer/core/editing/selection_controller.cc
+++ b/third_party/blink/renderer/core/editing/selection_controller.cc
@@ -1433,10 +1433,14 @@ FrameSelection& SelectionController::Sel
 }
 
 bool IsSelectionOverLink(const MouseEventWithHitTestResults& event) {
+if (base::FeatureList::IsEnabled(features::kDisableLinkDrag)){
+  return event.IsOverLink();
+}else{
   return (event.Event().GetModifiers() & WebInputEvent::Modifiers::kAltKey) !=
              0 &&
          event.IsOverLink();
 }
+}
 
 bool IsUserNodeDraggable(const MouseEventWithHitTestResults& event) {
   Node* inner_node = event.InnerNode();
--- a/third_party/blink/renderer/core/input/mouse_event_manager.cc
+++ b/third_party/blink/renderer/core/input/mouse_event_manager.cc
@@ -654,8 +654,14 @@ WebInputEventResult MouseEventManager::H
 
   bool single_click = event.Event().click_count <= 1;
 
+if (base::FeatureList::IsEnabled(features::kDisableLinkDrag)){
+  mouse_down_may_start_drag_ = single_click && !IsSelectionOverLink(event) &&
+                               !IsExtendingSelection(event) &&
+			        !event.GetHitTestResult().IsSelected(event.GetHitTestLocation());
+}else{
   mouse_down_may_start_drag_ = single_click && !IsSelectionOverLink(event) &&
                                !IsExtendingSelection(event);
+}
 
   mouse_down_ = event.Event();
 
