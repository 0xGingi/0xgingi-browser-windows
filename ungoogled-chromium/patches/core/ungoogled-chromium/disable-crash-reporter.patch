# Disable some background communication with clients2.google.com

--- a/chrome/browser/chrome_content_browser_client.cc
+++ b/chrome/browser/chrome_content_browser_client.cc
@@ -2568,7 +2568,8 @@ void ChromeContentBrowserClient::AppendE
     command_line->AppendSwitchASCII(switches::kMetricsClientID,
                                     client_info->client_id);
   }
-#elif BUILDFLAG(IS_POSIX)
+#endif
+#if(0)
 #if BUILDFLAG(IS_ANDROID)
   bool enable_crash_reporter = true;
 #elif BUILDFLAG(IS_CHROMEOS)
--- a/components/crash/core/app/crashpad.cc
+++ b/components/crash/core/app/crashpad.cc
@@ -74,6 +74,12 @@ void InitializeDatabasePath(const base::
 }
 
 bool InitializeCrashpadImpl(bool initial_client,
+    const std::string& a, const std::string& b, const base::FilePath& c,
+    const std::vector<std::string>& d, bool e) {
+  return false;
+}
+[[maybe_unused]]
+bool DeadInitializeCrashpadImpl(bool initial_client,
                             const std::string& process_type,
                             const std::string& user_data_dir,
                             const base::FilePath& exe_path,
--- a/components/gwp_asan/client/gwp_asan.cc
+++ b/components/gwp_asan/client/gwp_asan.cc
@@ -139,6 +139,11 @@ size_t AllocationSamplingFrequency(const
 
 // Exported for testing.
 GWP_ASAN_EXPORT absl::optional<AllocatorSettings> GetAllocatorSettings(
+    const base::Feature& a, bool b, const char* c) {
+  return absl::nullopt;
+}
+[[maybe_unused]]
+absl::optional<AllocatorSettings> DeadGetAllocatorSettings(
     const base::Feature& feature,
     bool boost_sampling,
     const char* process_type) {
--- a/third_party/crashpad/crashpad/client/crashpad_client_linux.cc
+++ b/third_party/crashpad/crashpad/client/crashpad_client_linux.cc
@@ -735,8 +735,6 @@ void CrashpadClient::CrashWithoutDump(co
 // static
 void CrashpadClient::SetFirstChanceExceptionHandler(
     FirstChanceHandler handler) {
-  DCHECK(SignalHandler::Get());
-  SignalHandler::Get()->SetFirstChanceHandler(handler);
 }
 
 void CrashpadClient::SetUnhandledSignals(const std::set<int>& signals) {
